name: CMake

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  BUILD_TYPE: Debug

jobs:
  build-ubuntu:
    name: Build on Ubuntu
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v3

    # Install Dependencies (Ubuntu)
    - name: Install Dependencies (Ubuntu)
      run: sudo apt-get update && sudo apt-get install -y cmake clang gcc g++ build-essential libboost-system-dev libboost-thread-dev libboost-program-options-dev libboost-test-dev

    # Install LLVM (Ubuntu) 
    - name: Install LLVM (Ubuntu)
      run: sudo apt-get purge python3-lldb-14 && wget https://apt.llvm.org/llvm.sh && chmod +x llvm.sh && sudo ./llvm.sh 17

    # Configure CMake (Ubuntu)
    - name: Configure CMake (Ubuntu)
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    # Build (Ubuntu)
    - name: Build (Ubuntu)
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    # Testing (macOS)
    - name: Testing (Ubuntu)
      working-directory: ${{github.workspace}}/build
      run: ctest -C ${{env.BUILD_TYPE}}

  build-macos:
    name: Build on macOS
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v3

    # Removing conflicting Python files
    - name: Remove Conflicting Python Files
      run: |
        rm -f '/usr/local/bin/2to3'
        brew link --overwrite python
        brew reinstall pipenv

    # Install Dependencies (macOS)
    - name: Install Dependencies (macOS)
      run: |
        brew install cmake
        brew install llvm
        # Check if Python 3.11 is already installed
        if ! python3 --version | grep -q "3.11"; then
          brew install python@3.11
        fi

    # Set LLVM_DIR environment variable
    - name: Set LLVM_DIR environment variable
      run: echo "LLVM_DIR=$(brew --prefix llvm)/lib/cmake/llvm" >> $GITHUB_ENV

    # Configure CMake (macOS)
    - name: Configure CMake (macOS)
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DLLVM_DIR=${{env.LLVM_DIR}}

    # Build (macOS)
    - name: Build (macOS)
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    # Testing (macOS)
    - name: Testing (macOS)
      working-directory: ${{github.workspace}}/build
      run: ctest -C ${{env.BUILD_TYPE}}

  build-windows:
    name: Build on Windows
    runs-on: windows-2022
  
    steps:
    - uses: actions/checkout@v3
  
    - name: Install dependencies
      uses: crazy-max/ghaction-chocolatey@v1
      with:
        args: install cmake ninja vswhere
  
    - uses: GuillaumeFalourd/setup-windows10-sdk-action@v1
      with:
        sdk-version: 19041
  
    - name: Build LLVM
      run: |
        $vsPath = (vswhere -latest -property installationPath)
        Import-Module (Join-Path $vsPath "Common7\Tools\Microsoft.VisualStudio.DevShell.dll")
        Enter-VsDevShell -VsInstallPath $vsPath -SkipAutomaticLocation -DevCmdArguments "-arch=x64 -host_arch=x64 -winsdk=10.0.19041.0"
        git clone --branch llvmorg-16.0.6 --depth 1 https://github.com/llvm/llvm-project.git
        cmake -Bbuild -GNinja "-DCMAKE_SYSTEM_VERSION=10.0.19041.0" -DCMAKE_MSVC_RUNTIME_LIBRARY=${{ matrix.rtlib }} -DCMAKE_BUILD_TYPE=Release -DCPACK_GENERATOR=ZIP "-DCMAKE_INSTALL_PREFIX=$pwd\\llvm-build" -DLLVM_TARGETS_TO_BUILD="X86" -DLLVM_ENABLE_PROJECTS="lld;clang;clang-tools-extra" -DLLVM_ENABLE_DIA_SDK=OFF llvm-project\\llvm
        cmake --build build
        cmake --install build --prefix $pwd\\llvm-build
  
    - name: Configure Environment for Built LLVM
      run: |
        echo "LLVM_DIR=$pwd\\llvm-build\\lib\\cmake\\llvm" | Out-File -Append $GITHUB_ENV
        echo "Clang_DIR=$pwd\\llvm-build\\lib\\cmake\\clang" | Out-File -Append $GITHUB_ENV
        echo "$pwd\\llvm-build\\bin" | Out-File -Append $GITHUB_PATH
  
    - name: Build C++ Project with LLVM
      run: |
        cmake -B ${{github.workspace}}/build -G "Ninja" -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_C_COMPILER=clang-cl -DCMAKE_CXX_COMPILER=clang-cl
        cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
